@main(input.1: prim<int>, taint<private>) {
.dummy_entry:
.entry:
  zero.1: prim<int>, taint<public> = const 0;
  ten.1: prim<int>, taint<public> = const 10;
  sum.3: prim<int>, taint<public> = id zero.1;
  digits.1: prim<int>, taint<private> = call @getDigits input.1;
  tmp.3: prim<int>, taint<private> = id input.1;
.loop:
  tmp.2: prim<int>, taint<private> = phi tmp.3 tmp.1 .entry .body;
  digits.2: prim<int>, taint<private> = phi digits.1 digits.2 .entry .body;
  sum.2: prim<int>, taint<private> = phi sum.3 sum.1 .entry .body;
  ten.2: prim<int>, taint<private> = phi ten.1 ten.2 .entry .body;
  zero.2: prim<int>, taint<private> = phi zero.1 zero.2 .entry .body;
  input.2: prim<int>, taint<private> = phi input.1 input.2 .entry .body;
  b.1: prim<bool>, taint<private> = gt tmp.2 zero.2;
  br b.1 .body .done;
.body:
  digit.1: prim<int>, taint<private> = call @mod tmp.2 ten.2;
  pow.1: prim<int>, taint<private> = call @power digit.1 digits.2;
  sum.1: prim<int>, taint<private> = add sum.2 pow.1;
  tmp.1: prim<int>, taint<private> = div tmp.2 ten.2;
  jmp .loop;
.done:
  res.1: prim<bool>, taint<private> = eq input.2 sum.2;
  print res.1;
}
